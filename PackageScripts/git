#!/bin/sh

# Try to keep things clean and without non-system dependencies. :P
export PATH=/bin:/sbin:/usr/bin:/usr/sbin

# Make sure we have the correct packaging root
if [ ! -d "$1" ] ; then
	echo "This script is meant to be invoked via Package."
	exit 254
else
	export PACKAGINGROOT="$1"
	shift
fi

(
if [ -n "$1" ] ; then
	cd git-$1
fi

if [ ! -f GIT-VERSION-GEN ] ; then
	echo "This does not look like a git source tree. Aborting."
	exit 23
fi

# Build process:

SDK=/Developer/SDKs/MacOSX10.4u.sdk \
CFLAGS="-fno-common -O3 -fno-strict-aliasing -pipe -arch ppc -arch i686 -nostdinc -B$SDK/usr/include/gcc -B$SDK/usr/lib/gcc -isystem$SDK/usr/include -F$SDK/System/Library/Frameworks" \
CXXFLAGS=$CFLAGS LDFLAGS="-arch ppc -arch i686 -Wl,-syslibroot,$SDK" \
./configure -C --prefix=/opt/git && \
make -j2 && \
export SRCDIR="${PWD}" && \
export VERSION=$(cat version) && \
export RELEASEVERSION=${VERSION/\.rc*} && \
export VERSIONMAJOR=${RELEASEVERSION/\.*} && \
export VERSIONMINOR=${RELEASEVERSION#*\.} && \
export VERSIONMINOR=$(echo ${VERSIONMINOR} | awk -F . '{ printf("%02d%02d",$1,$2); }') && \
export OUTPUTDIR="${SRCDIR}/../InstallerOutput/git-${VERSION}" && \
export INSTALLROOT="${OUTPUTDIR}/installroot" && \
rm -rf "${OUTPUTDIR}" 2>/dev/null ; \
make DESTDIR="${INSTALLROOT}" NO_INSTALL_HARDLINKS=1 install && \
mkdir -p "${INSTALLROOT}"/usr/local/bin && \
cp -rp contrib "${INSTALLROOT}"/opt/git && \
(
# Contrib items installed:
# 	contacts (sans docs)
# 	credential/netrc
# 	credential/osxkeychain
# 	diff-highlight
# 	git-jump
# 	subtree
# 	workdir

# Contrib items I'd like to install:
# 	completion
# 	remote-helpers

 cd contrib && \
 (
  cd workdir && \
  cp git-new-workdir "${INSTALLROOT}"/opt/git/bin && \
  chmod +x "${INSTALLROOT}"/opt/git/bin/git-new-workdir
 ) && \
 (
  for tool in diff-highlight git-jump; do
  (
   cd ${tool} && \
   cp ${tool} "${INSTALLROOT}"/opt/git/bin && \
   chmod +x "${INSTALLROOT}"/opt/git/bin/${tool}
  )
  done
 ) && \
 (
  for tool in contacts subtree; do
  (
   cd ${tool} && \
   make DESTDIR="${INSTALLROOT}" install
   # Can't install docs until asciidoc is built. :(
  )
  done
 ) && \
 (
  cd credential && \
  (
   cd netrc && \
   cp git-credential-netrc "${INSTALLROOT}"/opt/git/bin && \
   chmod +x "${INSTALLROOT}"/opt/git/bin/git-credential-netrc
  ) && \
  (
   cd osxkeychain && \
   make && \
   cp git-credential-osxkeychain "${INSTALLROOT}"/opt/git/bin
  )
 )
) && \
(
cd "${SRCDIR}/../git-htmldocs-${VERSION}" && \
mkdir "${INSTALLROOT}"/opt/git/doc && \
cp -rp . "${INSTALLROOT}"/opt/git/doc
) && \
(
cd "${SRCDIR}/../git-manpages-${VERSION}" && \
cp -rp . "${INSTALLROOT}"/opt/git/share/man
) && \
(
# Add third-party extensions.
(
# Cheat sheets
mkdir -p work/cheatsheets && \
mkdir -p "${INSTALLROOT}"/opt/git/share/extra/cheat && \
(
cd "${INSTALLROOT}"/opt/git/share/extra/cheat && \
curl -O http://wall-skills.com/wp-content/uploads/2013/12/git-Cheat-Sheet_Wall-Skills1.pdf
) && \
(
cd work/cheatsheets && \
curl -O http://jan-krueger.net/wordpress/wp-content/uploads/2007/09/git-cheat-sheet-v2.zip && \
unzip git-cheat-sheet-v2.zip && \
mv git-cheat-sheet-v2.pdf "${INSTALLROOT}"/opt/git/share/extra/cheat
)
) && \
(
# git-fat
cd "${INSTALLROOT}"/opt/git/bin && \
curl -Ok https://raw.githubusercontent.com/ozkandikmen-work/git-fat/gunter-from-master/git-fat
curl -Ok https://raw.githubusercontent.com/ozkandikmen-work/git-fat/gunter-from-master/git2fat
chmod +x git-fat git2fat
) && \
(
# git-last
cd "${INSTALLROOT}"/opt/git/bin && \
curl -Ok https://raw.githubusercontent.com/EugeneKay/scripts/master/bash/git-last.sh && \
mv git-last.sh git-last && \
chmod +x git-last
)
) && \
(
# gfl / git-forest
mkdir -p work/gfl && \
cd work/gfl && \
curl -Ok https://codeload.github.com/calebthompson/gfl/zip/master && \
unzip master && \
cd gfl-master && \
chmod +x git-forest gfl && \
mv git-forest gfl "${INSTALLROOT}"/opt/git/bin && \
mkdir -p "${INSTALLROOT}"/opt/git/share/extra/doc/gfl && \
mv README.md LICENSE "${INSTALLROOT}"/opt/git/share/extra/doc/gfl
) && \
(
# Link hackery.
cd "${INSTALLROOT}"/opt/git/bin && \
for file in git-cvsserver git-shell git-upload-pack; do
	rm $file && ln -s ../libexec/git-core/$file $file
done && \
for file in *; do ln -s /opt/git/bin/$file "${INSTALLROOT}"/usr/local/bin/$file; done && \
cd ../libexec/git-core && \
rm git-citool && ln -s git-gui git-citool
) || exit 42

# Packaging process:
# Note that the packproj requires Iceberg and its CLI tools.
(
echo "Building package for Git ${VERSION}"

export INSTALLDATA="${PACKAGINGROOT}/Installer Templates/git Installer"
cd "${INSTALLROOT}"/usr/local/bin
for file in *; do
	export LINKS="/usr/local/bin/$file ${LINKS}"
done
cd "${SRCDIR}"

cp COPYING "${OUTPUTDIR}/LICENSE.txt" && \
cp Documentation/user-manual.txt "${OUTPUTDIR}/README.txt" && \
cd "${OUTPUTDIR}" && \
cp "${INSTALLDATA}"/* . || exit 2

rm "Git.${VERSION}.dmg" 2>/dev/null
# This is out of sheer paranoia, though it's unnecessary.
rm -rf "${OUTPUTDIR}/build" 2>/dev/null

sed -e "s/@VERSION@/${VERSION}/g" -e "s/@VERSIONMINOR@/${VERSIONMINOR}/g" \
-e "s/@VERSIONMAJOR@/${VERSIONMAJOR}/g" -e "s%@INSTALLROOT@%${INSTALLROOT}%g" \
< "${INSTALLDATA}/Git.packproj.in" > Git.${VERSION}.packproj && \
sed -e "s/@VERSION@/${VERSION}/g" < WELCOME.txt.in > WELCOME.txt && \
sed -e "s~@LINKS@~${LINKS}~g" < "Uninstall Git.command.in" > "Uninstall Git.command" && \
/usr/local/bin/freeze -v Git.${VERSION}.packproj && \
(
ditto WELCOME.txt README.txt LICENSE.txt "Uninstall Git.command" build/ && \
chmod +x build/*.command && \
mv "build/Git.mpkg" "build/Install Git.mpkg" && \
PATH=/Developer/Tools:$PATH "${PACKAGINGROOT}"/create-dmg/create-dmg  --volname "Git ${VERSION}" \
--volicon git.icns --background Git.png --window-size 532 532 --icon-size 72 \
--icon Welcome.txt 75 50 --icon "Install Git.mpkg" 442 50 --icon README.txt 75 256 \
--icon LICENSE.txt 75 440 --icon "Uninstall Git.command" 442 440 \
"Git.${VERSION}.dmg" build
) || exit 5
) && \
echo 'Done!' && \
open "${OUTPUTDIR}/Git.${VERSION}.dmg"
)
